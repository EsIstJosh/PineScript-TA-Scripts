// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © UberTradingSystems
//
// Name:    VFI - Volume Flow Indicator [UTS]
// Created: 2020/01/07
// Desc:    
// The Volume Flow Indicator (VFI) indicator was first introduced in my June 2004 and is is based on the popular On Balance Volume (OBV) but with three very important modifications:
// [list]
// [*] Unlike the OBV, indicator values are no longer meaningless. Positive readings are bullish  and negative bearish.
// [*] The calculation is based on the day's median instead of the closing price.
// [*] A volatility threshold takes into account minimal price changes and another threshold eliminates excessive  volume.
// [*] The indicator takes into account only the latest 6 month volume action and not the entire data loaded in the chart.
// [/list]

// [b]General Usage[/b]
// A simplified interpretation of the VFI is that values above zero indicate a bullish state and the crossing of the zero line is the trigger or buy signal.
// The strongest signal with all money flow indicators is of course divergence.
// The classic form of divergence is when the indicator refuses to follow the price action and makes lower highs while price makes higher highs (negative divergence). If price reaches a new low but the indicator fails to do so, then price probably traveled lower than it should have. In this instance, you have positive divergence.
//
// [b]Default settings[/b]
// [list]
// [*] 130 VFI Length
// [*] 0.2 Coef
// [*] 2.5 Volume cutoff
// [*] 3   Smoothing Period    
// [/list]
// Further setting examples can be found on [url=http://www.precisiontradingsystems.com/VOLUME_FLOW.htm]http://www.precisiontradingsystems.com/VOLUME_FLOW.htm[/url]
// E.g. 40 or 18 Length to achieve different results like in the examples.
//
// [b]Trend Visualisation[/b]
// Optional: If the trend direction is [i]DOWN[/i] the moving average is painted red. If the trend direction is [i]UP[/i] the moving average is painted in green.
// If the movement is [i]FLAT[/i] then the color is grey.
//
// [b]Moving Averages[/b]
// 4 different types of Moving Averages are available for both FVI and the optional Moving Average of the FVI.
// [list]
// [*] ALMA (Arnaud Legoux Moving Average)
// [*] EMA  (Exponential Moving Average)
// [*] SMA  (Simple Moving Average)
// [*] WMA  (Weighted Moving Average)
// [/list]
//
// [b]Notes[/b]
// This indicator is using the exact formula from [url=http://mkatsanos.com/VFI.html]http://mkatsanos.com/VFI.html[/url] where EMA has been taken as default value for FVI smoothing calculation.


//@version=4
study(title="Coppock SVFI", shorttitle="VFI", format=format.volume)

wmaLength1 = input(title="WMA Length1", defval=24)
wmaLength2 = input(title="WMA Length2", defval=32)

longRoCLength1 = input(title="Long RoC Length1", defval=48)
shortRoCLength1 = input(title="Short RoC Length1", defval=18)
longRoCLength2 = input(title="Long RoC Length2", defval=72)
shortRoCLength2 = input(title="Short RoC Length2", defval=8)
source = input(close,type=input.source)
t=input('1D', type=input.resolution)
sym1 = input('DXY',type=input.symbol)
sym1a = security(sym1,t,ema(high,4))/10
sym1b = security(sym1,t,wma(low[64],16))/10
sym2 = input('VIX',type=input.symbol)
sym2a = security(sym2,t,ema(high,8))
sym2b = security(sym2,t,wma(low[64],32))
sym1set = ema(sym1a,8)/wma(sym1b[256],64)*20-30
sym2set = ema(sym2a,8)/wma(sym2b[256],64)*20-30
curve1 = wma(roc(source, longRoCLength1) + roc(source, shortRoCLength1), wmaLength2*2)
curve2 = wma(roc(source, longRoCLength2) + roc(source, shortRoCLength1), wmaLength1)
curve3 = sma(roc(source, longRoCLength2) + roc(source, shortRoCLength2), wmaLength2+wmaLength1)
curve4 = sma(roc(source, longRoCLength2) - roc(source, shortRoCLength1), wmaLength1-wmaLength2*-1)
plot(curve1*1.25-25,title="Blue", style=plot.style_histogram, linewidth=2, histbase=-25,transp=20, color=#0053ff)
plot(curve2*1.25-25,title="Green", style=plot.style_histogram, linewidth=2, histbase=-25,transp=70, color=#00ef0a)
plot(curve3*1.25-25,title="Purple", style=plot.style_histogram, linewidth=2, histbase=-25,  transp=55, color=#9c27b0)
plot(curve4*1.25-25,title="Orange", style=plot.style_histogram, linewidth=2, histbase=-25,transp=60, color=#ea4700)
plot(curve1*1.25-25,title="Blue", style=plot.style_linebr,    linewidth=1, histbase=-25,transp=0, color=#0053ff)
plot(curve2*1.25-25,title="Green", style=plot.style_linebr,    linewidth=1, histbase=-25,transp=0, color=#00ef0a)
plot(curve3*1.25-25,title="Purple", style=plot.style_linebr,    linewidth=1, histbase=-25,transp=0, color=#9c27b0)
plot(curve4*1.25-25,title="Orange", style=plot.style_linebr,    linewidth=1, histbase=-25,transp=0, color=#ea4700)
//plot(sym1set,color=color.yellow,linewidth=2,style=plot.style_linebr)
plot(sym2set,title="VIXVAL",color=color.fuchsia,linewidth=2,style=plot.style_linebr)
rsi1 = rsi(roc(source, longRoCLength1) + roc(source, shortRoCLength1), wmaLength1)
rsi2 = rsi(roc(source, longRoCLength2) + roc(source, shortRoCLength2), wmaLength2)
rsi3 = rsi(roc(source, longRoCLength1) + roc(source, shortRoCLength2), wmaLength2)
rsi4 = rsi(roc(source, longRoCLength2) + roc(source, shortRoCLength1), wmaLength1)

avrsi = (rsi1+rsi2+rsi3+rsi4)/4-50
avema1 = (ema(avrsi,4))/2
avema2 = (wma(avrsi,32))/2
//plot(avema1, color=color.white,style=plot.style_cross, linewidth=1, transp=50)
//plot(avema1, color=color.white, linewidth=1, transp=50)
//plot(avema2, color=color.gray, linewidth=1, transp=20)
avrsiline=plot(avrsi-25,title="RSI", color=color.white, linewidth=1)
plot(avrsi-25,title="RSI", color=color.white,style=plot.style_cross, linewidth=1)
oS1=hline(-10, color=color.lime,linestyle=hline.style_solid)
oB1=hline(10, color=color.maroon   ,linestyle=hline.style_solid)
oSS1=hline(-5, color=color.lime,linestyle=hline.style_solid)
oBB1=hline (5, color=color.maroon,  linestyle=hline.style_solid)
fill(oBB1,oB1, color=color.new(color.red, 85))
//fill(oS1,oB1, color=color.new(color.blue, 95))
fill(oS1,oSS1, color=color.new(color.green, 85))
oS2=hline(-40, color=color.lime,  linestyle=hline.style_solid)
oB2=hline(-10, color=color.lime)
oSS2=hline(-30, color=color.white,linestyle=hline.style_dashed,linewidth=2)
oBB2=hline(-20, color=color.maroon,  linestyle=hline.style_solid)
oSSS2=hline(0, color=color.white,linestyle=hline.style_dashed,linewidth=2)
oBBB2=hline(-45, color=color.lime,linestyle=hline.style_solid)
oBBBB2=hline(-15, color=color.maroon,linestyle=hline.style_solid)
UpperBound=hline(15, linewidth=2,color=color.white,linestyle=hline.style_solid)
LowerBound=hline(-50,linewidth=2, color=color.white,linestyle=hline.style_solid)
fill(oBB2,oBBBB2, color=color.new(color.maroon, 85))
//fill(oS2,oB2, color=color.new(color.blue, 95))
fill(oS2,oBBB2, color=color.new(color.green, 85))
// Const
kMaColor = color.aqua
kNeutralColor = color.gray
kBearColor = #c2189c
kBullColor = color.green
kkMaColor = color.blue
kkNeutralColor = color.white
kkBearColor = #c2189c
kkBullColor = color.purple

kMaColor2 = #42f5bf
kNeutralColor2 = color.gray
kBearColor2 = #c2189c
kBullColor2 = #22ff00
kkMaColor2 = #00f7ff
kkNeutralColor2 = #8e9494
kkBearColor2 =#ff0000
kkBullColor2 = #0779eb

kAlma = "ALMA"
kEma = "EMA"
kSma = "SMA"
kWma = "WMA"


// Input

vfi_length = input(16, title="Length", minval=1)
vfi_coef = input(0.2, title="Coef", minval=0.1)
vfi_volCutoff = input(2.5, title="Volume Cutoff", minval=0.1)
vfi_smoothLen = input(3, title="Smoothing Period", minval=1)
vfi_smoothType = input(kWma, title="Smoothing Type", options=[kAlma, kEma, kSma, kWma])
vfi_showTrend = input(false, title="Visualize Trend")
vfi_showFill = input(true, title="Apply Filling")
vfi_showMa = input(true, title="Show Moving Average")
vfi_maType = input(kAlma, title="Moving Average Type", options=[kAlma, kEma, kSma, kWma])
vfi_maLength = input(32, title="Moving Average Length", minval=1)
vfi_almaOffset = input(0.85, title="• ALMA - Offset (global setting)", minval=0.0, maxval=1.0, step=0.05) // more smoothness (closer to 1) vs. more responsiveness (closer to 0)
vfi_almaSigma = input(3.0, title="• ALMA - Sigma (global setting)", minval=0.0, step=0.05) // the larger sigma the smoother ALMA

vfi_emaType = input(kEma, title="Moving Average2 Type", options=[kAlma, kEma, kSma, kWma])
vfi_emaLength = input(16, title="Moving Average2 Length", minval=1)

vfi_length2 = input(32, title="Length 2", minval=1)
vfi_coef2 = input(0.2, title="Coef 2", minval=0.1)
vfi_volCutoff2 = input(2.5, title="Volume Cutoff 2", minval=0.1)
vfi_smoothLen2 = input(3, title="Smoothing Period 2", minval=1)
vfi_smoothType2 = input(kAlma, title="Smoothing Type 2", options=[kAlma, kEma, kSma, kWma])
vfi_showTrend2 = input(false, title="Visualize Trend 2")
vfi_showFill2 = input(true, title="Apply Filling 2")
vfi_showMa2 = input(true, title="Show Moving Average 2")
vfi_maType2 = input(kSma, title="Moving Average Type 2", options=[kAlma, kEma, kSma, kWma])
vfi_maLength2 = input(30, title="Moving Average Length 2", minval=1)
vfi_almaOffset2 = input(0.85, title="• ALMA - Offset (global setting)", minval=0.0, maxval=1.0, step=0.05) // more smoothness (closer to 1) vs. more responsiveness (closer to 0)
vfi_almaSigma2 = input(6.0, title="• ALMA - Sigma (global setting)", minval=0.0, step=0.05) // the larger sigma the smoother ALMA

vfi_emaType2 = input(kEma, title="Moving Average2 Type", options=[kAlma, kEma, kSma, kWma])
vfi_emaLength2 = input(32, title="Moving Average2 Length", minval=1)

// Functionality

isRising(sig) =>
    sig > sig[1]
    
isFlat(sig) =>
    sig == sig[1]

vfi_trendColor(sig) =>
    iff(isFlat(sig), kNeutralColor, iff(isRising(sig), kBullColor2, kBearColor2))
    
vfi_color(sig) =>
    iff(isFlat(sig), kNeutralColor, iff(sig > 0, kBullColor2, kBearColor2))
    
osc_color(sig) =>
    iff(sig == 0, kNeutralColor, iff(sig > 0, kBullColor, kBearColor))

smooth(t, sig, len) =>
    ma = float(sig)         // None
    if t == kSma            // Simple
        ma := sma(sig, len)
    if t == kEma            // Exponential
        ma := ema(sig, len)
    if t == kWma            // Weighted
        ma := wma(sig, len)
    if t == kAlma           // Arnaud Legoux
        ma := alma(sig, len, vfi_almaOffset, vfi_almaSigma)
    ma

isRising2(sig) =>
    sig > sig[1]
    
isFlat2(sig) =>
    sig == sig[1]

vfi_trendColor2(sig) =>
    iff(isFlat(sig), kNeutralColor, iff(isRising(sig), kBullColor2, kBearColor2))
    
vfi_color2(sig) =>
    iff(isFlat(sig), kNeutralColor, iff(sig > 0, kBullColor, #ff0000))
    
osc_color2(sig) =>
    iff(sig == 0, kNeutralColor, iff(sig > 0, kBullColor, kBearColor))

smooth2(t, sig, len) =>
    ma = float(sig)         // None
    if t == kSma            // Simple
        ma := sma(sig, len)
    if t == kEma            // Exponential
        ma := ema(sig, len)
    if t == kWma            // Weighted
        ma := wma(sig, len)
    if t == kAlma           // Arnaud Legoux
        ma := alma(sig, len, vfi_almaOffset, vfi_almaSigma)
    ma


calc_vfi(fviPeriod, smoothType, smoothLen, coef, vCoef) =>
    avg = nz(hlc3)
    inter = log(avg) - log(avg[1])
    vInter = stdev(inter, 30)
    cutOff = coef * vInter * close
    vAve = smooth(kSma, volume[1], fviPeriod)
    vMax = vAve * vCoef
    vC = min(volume, vMax)
    mf = avg - avg[1]
    vCp = iff(mf > cutOff, vC, iff(mf < -cutOff, -vC, 0))
    sVfi = sum(vCp, fviPeriod) / vAve
    vfi = smooth(smoothType, sVfi, smoothLen)
calc_vfi2(fviPeriod, smoothType, smoothLen, coef, vCoef) =>
    avg = nz(hl2)
    inter = log(avg) - log(avg[1])
    vInter = stdev(inter, 30)
    cutOff = coef * vInter * close
    vAve = smooth(kSma, volume[1], fviPeriod)
    vMax = vAve * vCoef
    vC = min(volume, vMax)
    mf = avg - avg[1]
    vCp = iff(mf > cutOff, vC, iff(mf < -cutOff, -vC, 0))
    sVfi = sum(vCp, fviPeriod) / vAve
    vfi = smooth(smoothType, sVfi, smoothLen)

    
value_vfi = calc_vfi(vfi_length, vfi_smoothType, vfi_smoothLen, vfi_coef, vfi_volCutoff)
value_ma = smooth(vfi_maType, value_vfi, vfi_maLength)
value_ema = smooth(vfi_emaType, value_vfi, vfi_emaLength)
value_vfi2 = calc_vfi2(vfi_length2, vfi_smoothType2, vfi_smoothLen2, vfi_coef2, vfi_volCutoff2)
value_ma2 = smooth(vfi_maType2, value_vfi2, vfi_maLength2)
value_ema2 = smooth(vfi_emaType2, value_vfi2, vfi_emaLength2)
color_vfi = vfi_showTrend ? vfi_trendColor(value_vfi) : vfi_color(value_vfi)
color_osc = vfi_showFill ? osc_color(value_vfi) : na
color_ma = vfi_showMa ? kMaColor : na
color_ema = vfi_showMa ? kMaColor : na
color_vfi2 = vfi_showTrend2 ? vfi_trendColor2(value_vfi2) : vfi_color2(value_vfi2)
color_vfii = value_vfi2>value_vfi?kBullColor2:kBearColor2
color_vfix = value_vfi>avrsi?kBearColor2:kBullColor2
// Drawings

plot_vfi = plot(value_vfi, title="VFI", color=color_vfi, linewidth=2)
plot_vfix = plot(value_vfi-25, title="VFI", color=color_vfi, linewidth=2)
plot_fill = plot(0, color=color_vfi, editable=false)
fill(plot_vfi, plot_fill, title="Oscillator Fill", color=color_osc, transp=80) 
hline(0, color=color.gray, title="Zero Line", linewidth=1, linestyle=hline.style_dotted)
//plot(value_ma, title="MA", color=color.green, linewidth=1, style=plot.style_circles)
ema1=plot(value_ema, title="EMA", color=color.teal, linewidth=2, style=plot.style_linebr, transp=55)
plot_vfi2 = plot(value_vfi2, title="VFII", color=color_vfi, linewidth=1, style=plot.style_linebr)
plot_vfi22 = plot(value_vfi2, title="VFII", color=color_vfi, linewidth=1, style=plot.style_circles)
//plot(value_ma2, title="MA", color=#aa07eb, linewidth=1)
ema2=plot(value_ema2, title="EMA", color=color.yellow, linewidth=2, style=plot.style_linebr, transp=60)
//fill(plot_vfi2, color=color_vfi2, title="Oscillator Fill2", color=color_osc, transp=85) 
fill(plot_vfi,plot_vfi2, color=color_osc, transp=60)
color_wma = value_ema > value_ema2 ? color.blue:color.orange
fill(ema1,ema2, color=color_wma, transp=80)
fill(plot_vfix,avrsiline, color=color_vfix, transp=50)

//===== Inputs
showDivergences = input(false, "Enable Divergences", input.bool)

Cycle1(i, waveThrottle, cycs) =>
    ret = 6.0*waveThrottle+1.0
    
    if (i==0) 
        ret := 1.0+waveThrottle
    else if (i==1) 
        ret := 1.0+waveThrottle*5.0
    else if (i==(cycs-1)) 
        ret := 1.0+waveThrottle
    else if (i==(cycs-2)) 
        ret := 1.0+waveThrottle*5.0
   
    ret


Cycle2(i, waveThrottle, cycs) =>
    ret = -4.0*waveThrottle 
    if (i==0) 
        ret := -2.0*waveThrottle
    else if (i==(cycs-1)) 
        ret := 0.0
    else if (i==(cycs-2)) 
        ret := -2.0*waveThrottle
   
    ret

Cycle3(i, waveThrottle, cycs) =>
    ret = waveThrottle
    
    if (i==(cycs-1)) 
        ret := 0.0
    else if (i==(cycs-2)) 
        ret := 0.0
   
    ret

iWTT_CSI_processor(CycleCount) =>
    wtt1=0.0
    wtt2=0.0
    wtt3=0.0
    wtt4=0.0
    wtt5=0.0
    _wtt1=0.0
    _wtt2=0.0
    _wtt3=0.0
    _wtt4=0.0
    _wtt5=0.0
    momentum=0.0
    acceleration=0.0
    swing=0.0
    cycs=50
    waveThrottle=float(160*CycleCount)
    currentVal=0.0  
    
    for i = 0 to cycs - 1 by 1
        swing:=Cycle1(i,waveThrottle,cycs)-wtt4*wtt1-_wtt5*_wtt2
        if(swing==0) 
            break
        momentum := Cycle2(i,waveThrottle,cycs)
        _wtt1 := wtt1
        wtt1 := (momentum-wtt4*wtt2)/swing

        acceleration:=Cycle3(i,waveThrottle,cycs)
        _wtt2 := wtt2
        wtt2 := acceleration/swing
 
        currentVal:=(close[49-i]-_wtt3*_wtt5-wtt3*wtt4)/swing
        _wtt3  := wtt3
        wtt3   := currentVal
        wtt4   := momentum-wtt5*_wtt1
        _wtt5  := wtt5
        wtt5   := acceleration

    currentVal

banding(CRSI, Period, Leveling) =>
    var percent = Leveling / 100.0
    periodMinusOne = Period-1
    maxima = -999999.0
    minima =  999999.0
    for i=0 to periodMinusOne
        crsi = nz(CRSI[i])
        if      crsi > maxima
            maxima := crsi
        else if crsi < minima
            minima := crsi
    stepFactor = (maxima - minima) / 100.0
    float lowBand = na
    for steps=0 to 100
        testValue = minima + stepFactor * steps
        below = 0
        for m=0 to periodMinusOne
            if CRSI[m] < testValue
                below := below + 1
        if below/Period >= percent
            lowBand := testValue
            break
    float highBand = na
    for steps=0 to 100
        testValue = maxima - stepFactor * steps
        above = 0
        for m=0 to periodMinusOne
            if CRSI[m] >= testValue
                above := above + 1
        if above/Period >= percent
            highBand := testValue
            break
    [highBand, lowBand]


//==== Vars
var leveling  = 10
var cyclicMemory = 34

//===== Calculations
thrust1=iWTT_CSI_processor(1)
thrust2=iWTT_CSI_processor(10)
      
CSIBuffer = thrust1-thrust2

[highBand, lowBand] = banding( CSIBuffer, cyclicMemory,  leveling)

//highband = plot(highBand/10, "HighBand", color=color.white , editable=true, style=plot.style_circles, linewidth=2, transp=90)
//lowband  = plot( lowBand/10,  "LowBand", color=color.white , editable=true, style=plot.style_circles, linewidth=2, transp=90)
//highbandline = plot(highBand/10, "HighBand", color=color.white , editable=true, transp=90)
//lowbandline  = plot( lowBand/10,  "LowBand", color=color.white , editable=true, transp=90)
//fill( highband,  lowband, transp=95 , color=#CCCC77   )

//plot(0, color=color.black, linewidth=1, transp=25)
macsi = vwma(CSIBuffer,20)
//plot(macsi/10, color=color.white, style=plot.style_circles)
//plot(CSIBuffer/10, color=color.white, linewidth=2)

// ===== Divergence Section


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Divergence Indicator uSING crsi
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
lbR = input(title="Pivot Lookback Right", defval=5) // 5
lbL = input(title="Pivot Lookback Left", defval=5) // 25
rangeUpper = input(title="Max of Lookback Range", defval=60) // 80
rangeLower = input(title="Min of Lookback Range", defval=5) // 10

plotBull = input(title="Plot Bullish", defval=true)
plotHiddenBull = input(title="Plot Hidden Bullish", defval=true)
plotBear = input(title="Plot Bearish", defval=true)
plotHiddenBear = input(title="Plot Hidden Bearish", defval=true)

bearColor = color.red
bullColor = color.green
divergenceSmartColor = color.silver

hiddenBullColor = color.new(color.green, 50) // make transparent
hiddenBearColor = color.new(color.red, 50) // make transparent
textColor = color.white
noneColor = color.new(color.white, 100)

osc = CSIBuffer

plFound = na(pivotlow(osc, lbL, lbR)) ? false : true
phFound = na(pivothigh(osc, lbL, lbR)) ? false : true

_inRange(cond) =>
	bars = barssince(cond == true)
	rangeLower <= bars and bars <= rangeUpper
	
	

//------------------------------------------------------------------------------
// Regular Bullish
// Osc: Higher Low
oscHL = osc[lbR] > valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])

// Price: Lower Low

priceLL = low[lbR] < valuewhen(plFound, low[lbR], 1)
bullCond = showDivergences and plotBull and priceLL and oscHL and plFound

plot(
     showDivergences and plFound and showDivergences ? osc[lbR] : na,
     offset=-lbR,
     title="Regular Bullish",
     linewidth=1,
     color=(bullCond ? divergenceSmartColor : noneColor),
     transp=0
     )

plotshape(bullCond ? osc[lbR] : na,"Bullish Circle",shape.circle,location.absolute,bullColor,0,offset=-lbR,size=size.tiny)


//------------------------------------------------------------------------------
// Hidden Bullish
// Osc: Lower Low

oscLL = osc[lbR] < valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])

// Price: Higher Low

priceHL = low[lbR] > valuewhen(plFound, low[lbR], 1)
hiddenBullCond = showDivergences and plotHiddenBull and priceHL and oscLL and plFound

plot(
	 showDivergences and plFound ? osc[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bullish",
	 linewidth=1,
	 color=(hiddenBullCond ? divergenceSmartColor : noneColor),
	 transp=0
	 )

plotshape(hiddenBullCond ? osc[lbR] : na,"Hidden Bullish Circle",shape.circle,location.absolute,hiddenBullColor,0,offset=-lbR,size=size.tiny)


//------------------------------------------------------------------------------
// Regular Bearish
// Osc: Lower High

oscLH = osc[lbR] < valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])

// Price: Higher High

priceHH = high[lbR] > valuewhen(phFound, high[lbR], 1)

bearCond = showDivergences and plotBear and priceHH and oscLH and phFound

plot(
	 showDivergences and phFound ? osc[lbR] : na,
	 offset=-lbR,
	 title="Regular Bearish",
	 linewidth=1,
	 color=(bearCond ? divergenceSmartColor : noneColor),
	 transp=0
	 )

plotshape(bearCond ? osc[lbR] : na,"Bearish Circle",shape.circle,location.absolute,bearColor,0,offset=-lbR,size=size.tiny)


//------------------------------------------------------------------------------
// Hidden Bearish
// Osc: Higher High

oscHH = osc[lbR] > valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])

// Price: Lower High

priceLH = high[lbR] < valuewhen(phFound, high[lbR], 1)

hiddenBearCond = showDivergences and plotHiddenBear and priceLH and oscHH and phFound

plot(
	 showDivergences and phFound ? osc[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bearish",
	 linewidth=2,
	 color=(hiddenBearCond ? divergenceSmartColor : noneColor),
	 transp=0
	 )

plotshape(hiddenBearCond ? osc[lbR] : na,"Hidden Bearish Circle",shape.circle,location.absolute,hiddenBearColor,0,offset=-lbR,size=size.tiny)

//





rsiLengthInput = input(14, minval=1, title="RSI Length",type=input.integer, group="RSI Settings")
rsiSourceInput = input(close, "Source", type=input.source,group="RSI Settings")
maTypeInput = input("SMA", type=input.string,title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input(4, type=input.integer,title="MA Length", group="MA Settings")
bbMultInput = input(2.0, minval=0.001, maxval=50,type=input.float, title="BB StdDev", group="MA Settings")

up = rma(max(change(rsiSourceInput), 0), rsiLengthInput)
down = rma(-min(change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ema(rsi, maLengthInput)
isBB = maTypeInput == "Bollinger Bands"
rsismooth=wma(rsiMA,5)
//plot(rsi/2-25, "RSI", color=color.fuchsia, transp=80)
// /plot(rsiMA-50, "RSI-based MA", color=color.fuchsia, linewidth=2)
rsiUpperBand = hline(12.5, "RSI Upper Band", color=#787B86)
hline(0, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(-12.5, "RSI Lower Band", color=#787B86)
plot(rsismooth/2-25, "RSI-based MA", color=color.white, linewidth=1, style=plot.style_circles, transp=20)
plot(rsismooth/2-25, "RSI-based MA", color=color.white, linewidth=1, style=plot.style_linebr, transp=70)